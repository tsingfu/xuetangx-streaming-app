<configuation>

    <apps>
        <app id="1" interfaceId="1">
            <properties>
                <property>
                    <name>batchDuration.seconds</name>
                    <value>15</value>
                    <description></description>
                </property>

                <property>
                    <name>kafka.simple.consumer.api.used</name>
                    <value>true</value>
                    <description>是否使用 kafka simple consumer api</description>
                </property>

                <property>
                    <name>kafka.consumer.group.id</name>
                    <value></value>
                    <description>当 kafka.simple.consumer.api.used = false 设置</description>
                </property>

                <!--kafka调优参数-->
                <property>
                    <name>spark.streaming.kafka.maxRatePerPartition</name>
                    <value></value>
                    <description>当 kafka.simple.consumer.api.used = true 设置</description>
                </property>

                <property>
                    <name>spark.streaming.kafka.maxRetries</name>
                    <value></value>
                    <description>当 kafka.simple.consumer.api.used = true 设置</description>
                </property>


                <!--调优参数-->

                <property>
                    <name>dataInterface.stream.repatition.partitions</name>
                    <value></value>
                    <description></description>
                </property>
                <property>
                    <name>checkpointDir</name>
                    <value>/tmp/xuetangx-streaming-app</value>
                    <description></description>
                </property>
                <property>
                    <name>spark.streaming.blockInterval</name>
                    <value>200</value>
                    <description>
                        Interval at which data received by Spark Streaming receivers is chunked into
                        blocks of data before storing them in Spark. Minimum recommended - 50 ms.
                    </description>
                </property>

                <property>
                    <name>spark.streaming.receiver.maxRate</name>
                    <value></value>
                    <description>Maximum rate (number of records per second) at which each receiver will receive data.
                        Effectively, each stream will consume at most this number of records per second.
                        Setting this configuration to 0 or a negative number will put no limit on the rate.
                        See the deployment guide in the Spark Streaming programing guide for mode details.
                    </description>
                </property>


                <property>
                    <name>spark.streaming.concurrentJobs</name>
                    <value>2</value>
                    <description></description>
                </property>

                <property>
                    <name>spark.sql.shuffle.partitions</name>
                    <value>5</value>
                    <description>
                        default:200. Configures the number of partitions to use when shuffling data for joins or aggregations.
                        sparkSQL DataFrame 做shuffle操作的分区数
                    </description>
                </property>
            </properties>
        </app>

        <app id="2" interfaceId="1"></app>
    </apps>

    <dataSources>
        <source id="1" type="kafka" name="ds_kafka1">
            <properties>
                <property>
                    <name>zookeeper.connect</name>
                    <value>10.0.0.193:2181,10.0.0.194:2181,10.0.0.195:2181</value>
                    <!--<value>localhost:2181</value>-->
                    <description></description>
                </property>
                <property>
                    <name>metadata.broker.list</name>
                    <value>10.0.0.193:9092,10.0.0.194:9092,10.0.0.195:9092</value>
                    <!--<value>localhost:9092</value>-->
                    <description></description>
                </property>
            </properties>
        </source>

        <source id="2" type="jdbc" name="ds_mysqldb1">
            <properties>
                <property>
                    <name>driver</name>
                    <value>com.mysql.jdbc.Driver</value>
                    <description></description>
                </property>
                <property>
                    <name>url</name>
                    <value>jdbc:mysql://10.0.0.168:3306/edxapp</value>
                    <description></description>
                </property>
                <property>
                    <name>user</name>
                    <value>mysql_ro</value>
                    <description></description>
                </property>
                <property>
                    <name>password</name>
                    <value>xuetangx.com168mysql</value>
                    <description></description>
                </property>
            </properties>
        </source>

        <source id="3" type="mongo" name="ds_mongodb1">
            <properties>
                <property>
                    <name>mongo.connection.url</name>
                    <value>mongodb://10.0.0.198:27017,10.0.0.233:27017,10.0.0.234:27017</value>
                    <!--<value>mongodb://192.168.9.164:27017</value>-->
                    <description></description>
                </property>
            </properties>
        </source>

        <source id="4" type="elasticsearch" name="ds_es1">
            <properties>
                <property>
                    <name>cluster.name</name>
                    <value>xuetang_escluster</value>
                    <!--<value>ES_Cluster1</value>-->
                    <!--<value>elasticsearch</value>-->
                    <description></description>
                </property>
                <property>
                    <name>serverPort.list</name>
                    <value>10.0.0.227:9300,10.0.0.228:9300,10.0.0.236:9300</value>
                    <!--<value>172.17.0.7:9300</value>-->
                    <!--<value>192.168.9.164:9300</value>-->
                    <description></description>
                </property>
            </properties>
        </source>


        <!--以下是测试环境-->
        <source id="21" type="jdbc" name="ds_mysqldb2">
            <properties>
                <property>
                    <name>driver</name>
                    <value>com.mysql.jdbc.Driver</value>
                    <description></description>
                </property>
                <property>
                    <name>url</name>
                    <value>jdbc:mysql://192.168.9.228:3306/edxapp</value>
                    <description></description>
                </property>
                <property>
                    <name>user</name>
                    <value>root</value>
                    <description></description>
                </property>
                <property>
                    <name>password</name>
                    <!--<value>mysql123</value>-->
                    <value></value>
                    <description></description>
                </property>
            </properties>
        </source>

        <source id="31" type="mongo" name="ds_mongodb1">
            <properties>
                <property>
                    <name>mongo.connection.url</name>
                    <value>mongodb://192.168.9.164:27017</value>
                    <description></description>
                </property>
            </properties>
        </source>

        <source id="41" type="elasticsearch" name="ds_es2">
            <properties>
                <property>
                    <name>cluster.name</name>
                    <value>elasticsearch</value>
                    <description></description>
                </property>
                <property>
                    <name>serverPort.list</name>
                    <value>192.168.9.164:9300</value>
                    <description></description>
                </property>
            </properties>
        </source>

    </dataSources>


    <dataInterfaces phase="1">
        <!--从kafka集群读取日志-->
        <interface id="1" type="input" sourceId="1" name="di_kafka1">
            <properties>
                <property>
                    <name>topics</name>
                    <value>platformlog,vpclog</value>
                    <!--<value>topic1-platformlog,topic2-vpclog</value>-->
                    <description></description>
                </property>
                <property>
                    <name>type</name>
                    <value>json</value>
                    <description></description>
                </property>
            </properties>
        </interface>

        <!--输出统计指标到ES 注册指标-->
        <interface id="41" type="output" sourceId="4" name="di_es41">
            <properties>
                <property>
                    <name>index</name>
                    <value>opkpi</value>
                    <description></description>
                </property>
                <property>
                    <name>type</name>
                    <value>realstats_minute_create_account</value>
                    <description></description>
                </property>
                <property>
                    <name>id.key.delimiter</name>
                    <value>-</value>
                    <description>
                        默认:#
                    </description>
                </property>
                <property>
                    <name>value.key</name>
                    <value>value</value>
                    <description>
                        统计指标取值的列名
                    </description>
                </property>
                <property>
                    <name>value.type</name>
                    <value>long</value>
                    <description>
                        统计指标取值的类型，默认情况，影响插入到 ES 的取值
                    </description>
                </property>
                <property>
                    <name>add.update.method</name>
                    <value>getAndUpdate</value>
                    <description>
                        可选取值：script, getAndUpdate
                        默认取值： getAndUpdate
                    </description>
                </property>
                <property>
                    <name>script.enabled</name>
                    <value>true</value>
                    <description>
                        配置输出统计指标时是否使用了 elasticsearch 的 script 功能
                    </description>
                </property>

                <property>
                    <name>script.name</name>
                    <value>update_realstat_value</value>
                    <description>
                        ctx._source.value += p1
                        配置用于累计更新es的取值脚本的名字(不含扩展名)
                        脚本需要放在es集群所有的数据节点 config/scripts/脚本名.groovy
                    </description>
                </property>

                <!--只支持自定义一个参数名-->
                <property>
                    <name>script.param</name>
                    <value>p1</value>
                    <description>
                        根据 update.script.name 脚本中使用的参数名，配置程序使用的参数
                    </description>
                </property>

            </properties>
        </interface>

        <!--输出统计指标到ES 登录指标-->
        <interface id="42" type="output" sourceId="4" name="di_es42">
            <properties>
                <property>
                    <name>index</name>
                    <value>opkpi</value>
                    <description></description>
                </property>
                <property>
                    <name>type</name>
                    <value>realstats_minute_login_account</value>
                    <description></description>
                </property>
                <property>
                    <name>id.key.delimiter</name>
                    <value>-</value>
                    <description>
                        默认:#
                    </description>
                </property>
                <property>
                    <name>value.key</name>
                    <value>value</value>
                    <description>
                        统计指标取值的列名
                    </description>
                </property>
                <property>
                    <name>value.type</name>
                    <value>long</value>
                    <description>
                        统计指标取值的类型，默认情况，影响插入到 ES 的取值
                    </description>
                </property>
                <property>
                    <name>add.update.method</name>
                    <value>getAndUpdate</value>
                    <description>
                        可选取值：script, getAndUpdate
                        默认取值： getAndUpdate
                    </description>
                </property>
                <property>
                    <name>script.enabled</name>
                    <value>false</value>
                    <description>
                        配置输出统计指标时是否使用了 elasticsearch 的 script 功能
                    </description>
                </property>

                <property>
                    <name>script.name</name>
                    <value>update_realstat_value</value>
                    <description>
                        ctx._source.value += p1
                        配置用于累计更新es的取值脚本的名字(不含扩展名)
                        脚本需要放在es集群所有的数据节点 config/scripts/脚本名.groovy
                    </description>
                </property>

                <!--只支持自定义一个参数名-->
                <property>
                    <name>script.param</name>
                    <value>p1</value>
                    <description>
                        根据 update.script.name 脚本中使用的参数名，配置程序使用的参数
                    </description>
                </property>

            </properties>
        </interface>

        <!--输出统计指标到ES 访问活跃指标-->
        <interface id="43" type="output" sourceId="4" name="di_es43">
            <properties>
                <property>
                    <name>index</name>
                    <value>opkpi</value>
                    <description></description>
                </property>
                <property>
                    <name>type</name>
                    <value>realstats_minute_active_account</value>
                    <description></description>
                </property>
                <property>
                    <name>id.key.delimiter</name>
                    <value>-</value>
                    <description>
                        默认:#
                    </description>
                </property>
                <property>
                    <name>value.key</name>
                    <value>value</value>
                    <description>
                        统计指标取值的列名
                    </description>
                </property>
                <property>
                    <name>value.type</name>
                    <value>long</value>
                    <description>
                        统计指标取值的类型，默认情况，影响插入到 ES 的取值
                    </description>
                </property>
                <property>
                    <name>add.update.method</name>
                    <value>getAndUpdate</value>
                    <description>
                        可选取值：script, getAndUpdate
                        默认取值： getAndUpdate
                    </description>
                </property>
                <property>
                    <name>script.enabled</name>
                    <value>true</value>
                    <description>
                        配置输出统计指标时是否使用了 elasticsearch 的 script 功能
                    </description>
                </property>

                <property>
                    <name>script.name</name>
                    <value>update_realstat_value</value>
                    <description>
                        ctx._source.value += p1
                        配置用于累计更新es的取值脚本的名字(不含扩展名)
                        脚本需要放在es集群所有的数据节点 config/scripts/脚本名.groovy
                    </description>
                </property>

                <!--只支持自定义一个参数名-->
                <property>
                    <name>script.param</name>
                    <value>p1</value>
                    <description>
                        根据 update.script.name 脚本中使用的参数名，配置程序使用的参数
                    </description>
                </property>

            </properties>
        </interface>


        <!--输出统计指标到ES 选课指标-->
        <interface id="44" type="output" sourceId="4" name="di_es44">
            <properties>
                <property>
                    <name>index</name>
                    <value>opkpi</value>
                    <description></description>
                </property>
                <property>
                    <name>type</name>
                    <value>realstats_minute_enrollment_state</value>
                    <description></description>
                </property>
                <property>
                    <name>id.key.delimiter</name>
                    <value>-</value>
                    <description>
                        默认:#
                    </description>
                </property>
                <property>
                    <name>value.key</name>
                    <value>value</value>
                    <description>
                        统计指标取值的列名
                    </description>
                </property>
                <property>
                    <name>value.type</name>
                    <value>long</value>
                    <description>
                        统计指标取值的类型，默认情况，影响插入到 ES 的取值
                    </description>
                </property>
                <property>
                    <name>add.update.method</name>
                    <value>getAndUpdate</value>
                    <description>
                        可选取值：script, getAndUpdate
                        默认取值： getAndUpdate
                    </description>
                </property>
                <property>
                    <name>script.enabled</name>
                    <value>true</value>
                    <description>
                        配置输出统计指标时是否使用了 elasticsearch 的 script 功能
                    </description>
                </property>

                <property>
                    <name>script.name</name>
                    <value>update_realstat_value</value>
                    <description>
                        ctx._source.value += p1
                        配置用于累计更新es的取值脚本的名字(不含扩展名)
                        脚本需要放在es集群所有的数据节点 config/scripts/脚本名.groovy
                    </description>
                </property>

                <!--只支持自定义一个参数名-->
                <property>
                    <name>script.param</name>
                    <value>p1</value>
                    <description>
                        根据 update.script.name 脚本中使用的参数名，配置程序使用的参数
                    </description>
                </property>

            </properties>
        </interface>


        <!--输出统计指标到ES 学习活跃指标-->
        <interface id="45" type="output" sourceId="4" name="di_es45">
            <properties>
                <property>
                    <name>index</name>
                    <value>opkpi</value>
                    <description></description>
                </property>
                <property>
                    <name>type</name>
                    <value>realstats_minute_access_courseware</value>
                    <description></description>
                </property>
                <property>
                    <name>id.key.delimiter</name>
                    <value>-</value>
                    <description>
                        默认:#
                    </description>
                </property>
                <property>
                    <name>value.key</name>
                    <value>value</value>
                    <description>
                        统计指标取值的列名
                    </description>
                </property>
                <property>
                    <name>value.type</name>
                    <value>long</value>
                    <description>
                        统计指标取值的类型，默认情况，影响插入到 ES 的取值
                    </description>
                </property>
                <property>
                    <name>add.update.method</name>
                    <value>getAndUpdate</value>
                    <description>
                        可选取值：script, getAndUpdate
                        默认取值： getAndUpdate
                    </description>
                </property>
                <property>
                    <name>script.enabled</name>
                    <value>true</value>
                    <description>
                        配置输出统计指标时是否使用了 elasticsearch 的 script 功能
                    </description>
                </property>

                <property>
                    <name>script.name</name>
                    <value>update_realstat_value</value>
                    <description>
                        ctx._source.value += p1
                        配置用于累计更新es的取值脚本的名字(不含扩展名)
                        脚本需要放在es集群所有的数据节点 config/scripts/脚本名.groovy
                    </description>
                </property>

                <!--只支持自定义一个参数名-->
                <property>
                    <name>script.param</name>
                    <value>p1</value>
                    <description>
                        根据 update.script.name 脚本中使用的参数名，配置程序使用的参数
                    </description>
                </property>

            </properties>
        </interface>

    </dataInterfaces>

    <externalCaches>
        <!--mysql.api_deviceinfo-->
        <cache id="21" sourceId="2">
            <properties>
                <property>
                    <name>tableName</name>
                    <value>api_deviceinfo</value>
                    <description></description>
                </property>
                <property>
                    <name>keyName</name>
                    <value>uuid</value>
                    <description></description>
                </property>
                <property>
                    <name>cache.keyName.list</name>
                    <value>channel,event, uid</value>
                    <description></description>
                </property>
                <property>
                    <name>broadcast.enabled</name>
                    <!--<value>true</value>-->
                    <value>false</value>
                    <description></description>
                </property>
                <property>
                    <name>batchLimit</name>
                    <value>100</value>
                    <description></description>
                </property>
                <property>
                    <name>cache.query.condition.enabled</name>
                    <value>true</value>
                    <description>
                        是否启用外部关联条件查询
                    </description>
                </property>

                <property>
                    <name>maxActive</name>
                    <value>5</value>
                    <description></description>
                </property>

                <property>
                    <name>initialSize</name>
                    <value>2</value>
                    <description></description>
                </property>

                <property>
                    <name>maxIdle</name>
                    <value>3</value>
                    <description></description>
                </property>

                <property>
                    <name>minIdle</name>
                    <value>2</value>
                    <description></description>
                </property>

                <property>
                    <name>maxWait</name>
                    <value>10000</value>
                    <description></description>
                </property>

            </properties>
        </cache>

        <!--mysql.course_meta_course-->
        <cache id="22" sourceId="2">
            <properties>
                <property>
                    <name>tableName</name>
                    <value>course_meta_course</value>
                    <description></description>
                </property>
                <property>
                    <name>keyName</name>
                    <value>course_id</value>
                    <description>

                    </description>
                </property>
                <property>
                    <name>cache.keyName.list</name>
                    <!--<value>course_type, owner, status, start, end</value>-->
                    <!--'%Y-%m-%d %H:%i:%s'-->
                    <!--<value>course_type, owner, status, date_format(start, '%Y-%c-%d %h:%i:%s') as start, date_format(end, '%Y-%c-%d %h:%i:%s') as end</value>-->
                    <value>course_type, owner, status, date_format(date_add(start, interval +8 hour), '%Y-%m-%d %H:%i:%s') as start, date_format(date_add(end, interval +8 hour), '%Y-%m-%d %H:%i:%s') as end</value>
                    <description></description>
                </property>
                <property>
                    <name>broadcast.enabled</name>
                    <!--<value>true</value>-->
                    <value>false</value>
                    <description></description>
                </property>
                <property>
                    <name>batchLimit</name>
                    <value>100</value>
                    <description></description>
                </property>
                <property>
                    <name>cache.query.condition.enabled</name>
                    <value>true</value>
                    <description>
                        // 外部关联优化，是否启用条件关联(符合条件才进行关联查询)，根据 插件类的 queryOrNot 方法判断
                    </description>
                </property>

                <property>
                    <name>maxActive</name>
                    <value>5</value>
                    <description></description>
                </property>

                <property>
                    <name>initialSize</name>
                    <value>2</value>
                    <description></description>
                </property>

                <property>
                    <name>maxIdle</name>
                    <value>3</value>
                    <description></description>
                </property>


                <property>
                    <name>minIdle</name>
                    <value>2</value>
                    <description></description>
                </property>

                <property>
                    <name>maxWait</name>
                    <value>10000</value>
                    <description></description>
                </property>

            </properties>
        </cache>


        <!--mysql.course_meta_course-->
        <cache id="23" sourceId="2">
            <properties>
                <property>
                    <name>tableName</name>
                    <value>auth_user</value>
                    <description></description>
                </property>
                <property>
                    <name>keyName</name>
                    <value>id</value>
                    <description>
                        数据库中表的作为 key 的字段名
                    </description>
                </property>
                <property>
                    <name>cache.keyName.list</name>
                    <!--<value>date_joined</value>-->
                    <!--'%Y-%m-%d %H:%i:%s'-->
                    <!--<value>date_format(date_joined, '%Y-%c-%d') as date_joined</value>-->
                    <value>date_format(date_add(date_joined, interval +8 hour), '%Y-%m-%d %H:%i:%s') as date_joined</value>
                    <description>
                        取 auth_user.date_joined 格式由 datetime 转换为 '%Y-%c-%d' 字符串
                    </description>
                </property>
                <property>
                    <name>broadcast.enabled</name>
                    <value>true</value>
                    <!--<value>true</value>-->
                    <description></description>
                </property>
                <property>
                    <name>batchLimit</name>
                    <value>100</value>
                    <description></description>
                </property>
                <property>
                    <name>cache.query.condition.enabled</name>
                    <value>true</value>
                    <description>
                        // 外部关联优化，是否启用条件关联(符合条件才进行关联查询)，根据 插件类的 queryOrNot 方法判断
                    </description>
                </property>

                <property>
                    <name>maxActive</name>
                    <value>5</value>
                    <description></description>
                </property>

                <property>
                    <name>initialSize</name>
                    <value>2</value>
                    <description></description>
                </property>

                <property>
                    <name>maxIdle</name>
                    <value>3</value>
                    <description></description>
                </property>


                <property>
                    <name>minIdle</name>
                    <value>2</value>
                    <description></description>
                </property>

                <property>
                    <name>maxWait</name>
                    <value>10000</value>
                    <description></description>
                </property>

            </properties>
        </cache>


        <!--排重缓存-->
        <cache id="31" sourceId="3">
            <properties>
                <property>
                    <name>mongo.db</name>
                    <value>realstats_deduplicate_db</value>
                    <description></description>
                </property>
            </properties>
        </cache>


        <!--测试 从 mongodb 取数据
        <cache id="3" sourceId="31">
            <properties>
                <property>
                    <name>mongo.db</name>
                    <value>credential</value>
                    <description></description>
                </property>
                <property>
                    <name>mongo.collection.name</name>
                    <value>course_credential</value>
                    <description></description>
                </property>
            </properties>
        </cache>
        -->


    </externalCaches>

    <prepares id="1" interfaceId="1" phase="2">
        <!--Note: 应用会选择 step.enabled = true 的 step 根据 step.id 顺序排序执行 step-->

        <step id="1" type="format" method="plugin" enabled="true">
            <properties>
                <property>
                    <name>class</name>
                    <value>com.xuetangx.streaming.rules.PlatformLogFormatRule</value>
                    <description></description>
                </property>
            </properties>
        </step>

        <step id="2" type="enhance" method="plugin" enabled="true">
            <!--增强时间，转换时间格式，新增时间所属时段的起始值
            统计登录指标，每条日志都需要应用
            -->
            <properties>
                <property>
                    <name>class</name>
                    <value>com.xuetangx.streaming.rules.TimeRule</value>
                    <description>
                        增强时间字段的属性，
                        1将日志中时间字段timeKeyName (格式yyyy-MM-ddTHH:mm:ss.SSS+00:00, yyyy-MM-dd HH:mm:ss.SSS+00:00) 转换为CST格式，取 yyyy-MM-dd HH:mm:ss
                        2根据add.timeKeyInterval.minutes.list的配置新增 (add.timeKey.prefix) + (add.timeKeyInterval) + "_start", (add.timeKey.prefix) + (add.timeKeyInterval) + "_end"
                        如 time_minute_1_start, time_minute_1_end
                        1_start, 1_end
                    </description>
                </property>
                <property>
                    <name>timeKeyName</name>
                    <value>time</value>
                    <description>
                        设置日志中时间字段的字段名
                    </description>
                </property>
                <property>
                    <name>add.timeKeyInterval.minutes.list</name>
                    <value>1</value>
                    <description>
                        设置时间区间间隔
                        示例: `1,5,10`
                        表示：时间区间间隔1分钟，5分钟，10分钟
                    </description>
                </property>
                <property>
                    <name>add.timeKey.prefix</name>
                    <value>time_minute_</value>
                    <description>
                        设置新增时间字段名的前缀，默认空。
                        新增时间属性名为： (add.timeKey.prefix) + (add.timeKeyInterval) + _start, (add.timeKey.prefix) + (add.timeKeyInterval) + _end
                        示例:
                        time_minute_1_start, time_minute_1_end
                    </description>
                </property>
            </properties>
        </step>

        <!--外部缓存关联 mysql.api_devinceinfo，修正移动端的 origin_referer, spam
        基本统计维度，都需要
        -->
        <step id="3" type="enhance" method="plugin" enabled="true">
            <properties>
                <property>
                    <name>class</name>
                    <value>com.xuetangx.streaming.rules.JdbcCacheRule</value>
                    <description>
                        使用 unique.key 关联mysql api_deviceinfo 信息
                    </description>
                </property>
                <property>
                    <name>cacheId</name>
                    <value>21</value>
                    <description>
                        设置使用的cache关联的id
                    </description>
                </property>
                <property>
                    <name>batchProcessor.class.list</name>
                    <value>com.xuetangx.streaming.rules.JdbcApiDeviceInfoRecordRule</value>
                    <description>
                        默认： 如果没有不做关联，原值返回
                        可以指定多个classname，逗号分隔
                        com.xuetangx.streaming.prepares.EnhanceApiDeviceInfoProcessor: 增强移动设备信息 origin_referer, spam
                    </description>
                </property>
            </properties>
        </step>

        <!--外部缓存关联 mysql.course_meta_course ，新增课程信息 course_type, owner, status, start, end
        选课统计维度，后续有多个需要
        -->
        <step id="4" type="enhance" method="plugin" enabled="true">
            <properties>
                <property>
                    <name>class</name>
                    <value>com.xuetangx.streaming.rules.JdbcCacheRule</value>
                    <description>
                        设置批量查询mysql的插件类
                    </description>
                </property>
                <property>
                    <name>cacheId</name>
                    <value>22</value>
                    <description>
                        设置使用的 cache 关联的id
                    </description>
                </property>
                <property>
                    <name>batchProcessor.class.list</name>
                    <value>com.xuetangx.streaming.rules.JdbcCourseInfoRecordRule</value>
                    <description>
                        默认： 如果没有不做关联，原值返回
                        可以指定多个classname，逗号分隔
                        com.xuetangx.streaming.prepares.EnhanceMsCourseInfoProcessor:
                        使用 course_id 关联 mysql.course_meta_course 增强课程信息 course_type, owner, status, start, end
                        字段名：course_type, course_owner, course_status, course_start, course_end
                    </description>
                </property>
            </properties>
        </step>

        <!--外部缓存关联 mysql.auth_user ，新增课程信息 date_joined
        登录指标，每条日志都需要
        -->
        <step id="5" type="enhance" method="plugin" enabled="true">
            <properties>
                <property>
                    <name>class</name>
                    <value>com.xuetangx.streaming.rules.JdbcCacheRule</value>
                    <description>
                        设置批量查询mysql的插件类
                    </description>
                </property>
                <property>
                    <name>cacheId</name>
                    <value>23</value>
                    <description>
                        设置使用的 cache 关联的id
                    </description>
                </property>
                <property>
                    <name>batchProcessor.class.list</name>
                    <value>com.xuetangx.streaming.rules.JdbcAuthUserInfoRecordRule</value>
                    <description>
                        默认： 如果没有不做关联，原值返回
                        可以指定多个classname，逗号分隔
                        com.xuetangx.streaming.prepares.EnhanceMsCourseInfoProcessor:
                        使用 course_id 关联 mysql.auth_user 增强课程信息 date_joined
                        字段名：date_joined
                    </description>
                </property>
            </properties>
        </step>

        <!--user_id 分钟级排重-->
        <step id="6" type="enhance" method="plugin" enabled="true">
            <properties>
                <property>
                    <name>class</name>
                    <value>com.xuetangx.streaming.rules.DeDuplicateRule</value>
                    <description>
                        user_id 排重，新增标识是否重复的属性 (log.deduplicate.key) + _duplicate_flag
                        示例： user_id_minutely_duplicate_flag
                    </description>
                </property>
                <property>
                    <name>cacheId</name>
                    <value>31</value>
                    <description></description>
                </property>
                <property>
                    <name>log.deduplicate.key</name>
                    <value>user_id</value>
                    <description>
                        排重的key
                    </description>
                </property>
                <property>
                    <name>deduplicate.interval.labels</name>
                    <value>minutely, daily</value>
                    <description>
                        排重的时间间隔标签
                    </description>
                </property>
                <property>
                    <name>log.collection.key</name>
                    <value>time</value>
                    <description></description>
                </property>
                <property>
                    <name>mongo.deduplicate.keyField</name>
                    <value>user_id</value>
                    <description></description>
                </property>
                <property>
                    <name>mongo.collection.name.prefix</name>
                    <value>deduplicate_</value>
                    <description>
                        mongo中用于缓存的collection名：(mongo.collection.name.prefix) + log.deduplicate.key + (log.collection.key或相关)
                        示例： deduplicate_minutely_uuid_20151106_1720, deduplicate_minutely_uuid_20151106_1721
                    </description>
                </property>
            </properties>
        </step>

    </prepares>


    <computeStatistics id="1" interfaceId="1" phase="3">

        <computeStatistic id="1" enabled="true">
            <!--Note: 应用会选择 step.enabled = true 的 step 根据 step.id 顺序排序执行 step-->
            <prepares>
                <step id="1" type="filter" method="spark-sql" enabled="false">
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, time_minute_1_start, time_minute_1_end, user_id_daily_duplicate_flag, user_id_minutely_duplicate_flag, course_type, course_process, course_id, date_joined</value>
                            <!--<value></value>-->
                            <description>设置需要用到的字段名，流程：读入数据后，转换为spark-SQL的DataFrame，然后进行 selectExp，仅保留需要的数据</description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <value></value>
                            <description>
                            </description>
                        </property>
                    </properties>
                </step>

            </prepares>

            <!--实时访问活跃、学习活跃、登录人数(访问活跃指标 = 登录指标 + 注册指标)，
            需要全量分析，指标维度：L0(总计), L1(业务:主站/SPOC), L2(分平台:iPhone,iPad,android,androidTV,web)
            ,L3.1(分来源-会话),L3.2(分渠道-会话)
            ,L3.2.1(分来源-会话),L3.2.2(分渠道-会话)

            -->
            <computes>
                <!--计算注册人数统计指标-->
                <step id="1" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, time_minute_1_start as start_date, time_minute_1_end as end_date, user_id_daily_duplicate_flag</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <value>event_type in ('common.student.account_created','common.student.account_success','oauth.user.register','oauth.user.register_success','weixinapp.user.register_success','api.user.oauth.register_success','api.user.register','api.user.register_success') and user_id_daily_duplicate_flag = 0</value>
                            <description>
                                过滤注册成功事件日志，并去掉daily重复记录
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.1:origin_referer,L3.2:spam,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.1:T1:T2,L3.2:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>create_account</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>users</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>

                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>41</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>



                <!--实时统计登录人次-->
                <step id="2" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, course_id, time_minute_1_start as start_date, time_minute_1_end as end_date, user_id_minutely_duplicate_flag, date_joined</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <value>substr(time, 0, 11) != date_joined</value>
                            <description>
                                统计登录人次，不含当天注册的用户
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>login_account</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>visits</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>

                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>42</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>

                <!--统计登录人数-->
                <step id="3" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, course_id, time_minute_1_start as start_date, time_minute_1_end as end_date, user_id_minutely_duplicate_flag, date_joined</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <!--<value>event_type in ('edx.course.enrollment.activated','api.course.enrollment') and user_id_duplicate_flag = 0</value>-->
                            <value>substr(time, 0, 11) != date_joined and user_id_minutely_duplicate_flag = 0</value>
                            <description>
                                统计选课人数
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>login_account</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>users</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>
                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>42</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>


                <!--实时访问活跃人次-->
                <step id="4" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, course_id, time_minute_1_start as start_date, time_minute_1_end as end_date, user_id_minutely_duplicate_flag</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <value></value>
                            <description>
                                统计访问活跃人次
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>active_account</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>visits</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>

                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>43</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>

                <!--统计访问活跃人数-->
                <step id="5" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, course_id, time_minute_1_start as start_date, time_minute_1_end as end_date, user_id_minutely_duplicate_flag</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <!--<value>event_type in ('edx.course.enrollment.activated','api.course.enrollment') and user_id_duplicate_flag = 0</value>-->
                            <value>user_id_minutely_duplicate_flag = 0</value>
                            <description>
                                统计选课人数
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>active_account</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>users</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>
                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>43</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>



                <!--统计选课人次-->
                <step id="6" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, time_minute_1_start as start_date, time_minute_1_end as end_date, course_type, course_process, course_id</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <!--<value>event_type in ('edx.course.enrollment.activated','api.course.enrollment')</value>-->
                            <value>event_type in ('edx.course.enrollment.activated')</value>
                            <description>
                                统计选课人次
                                过滤选课成功类型的日志，只取 edx.course.enrollment.activated 的日志(发现存在对同一选课日志进行2次打点，1次 edx.course.enrollment.activated, 1次 api.course.enrollment)
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,L5:course_type,L6:course_process,L7:course_id,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2,L5:T1:T2,L6:T1:T2,L7:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle

                                参考：$SPARK_CMD enrollment_state.py ${st} ${et} L1,L2,L3.2.1,L3.2.2,L5,L6,L7 ${HDFS_ROOT}/enrollment_state/${st}_${et}
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>enrollment_state</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>visits</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>

                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>44</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>

                <!--统计选课人数-->
                <step id="7" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, time_minute_1_start as start_date, time_minute_1_end as end_date, course_type, course_process, course_id, user_id_minutely_duplicate_flag</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <value>event_type in ('edx.course.enrollment.activated') and user_id_minutely_duplicate_flag = 0</value>
                            <description>
                                统计选课人数,
                                过滤选课成功类型的日志，只取 edx.course.enrollment.activated 的日志(发现存在对同一选课日志进行2次打点，1次 edx.course.enrollment.activated, 1次 api.course.enrollment)
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,L5:course_type,L6:course_process,L7:course_id,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2,L5:T1:T2,L6:T1:T2,L7:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle

                                参考：$SPARK_CMD enrollment_state.py ${st} ${et} L1,L2,L3.2.1,L3.2.2,L5,L6,L7 ${HDFS_ROOT}/enrollment_state/${st}_${et}
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>enrollment_state</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>users</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>
                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>44</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>


                <!--实时学习活跃人次-->
                <step id="8" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, course_id, time_minute_1_start as start_date, time_minute_1_end as end_date, user_id_minutely_duplicate_flag, course_type, course_process, course_id</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <!--<value>course_id != '' and event_type like '/courses/%/courseware/%'</value>-->
                            <value>event_type like '/courses/%/courseware/%'</value>
                            <description>
                                统计学习活跃人次
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,L5:course_type,L6:course_process,L7:course_id,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle
                                参考：$SPARK_CMD access_courseware.py ${st} ${et} L1,L2,L3.2.1,L3.2.2,L5,L6,L7 ${HDFS_ROOT}/access_courseware/${st}_${et}
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>access_courseware</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>visits</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>

                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>45</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>


                <!--实时学习活跃人数-->
                <step id="9" type="compute" method="spark-sql" enabled="true">
                    <!-- 计算后的结果形式
                      计算的指标在配置是最好每个时间维度，放在不同的step中，输出能够统一
                    -->
                    <properties>
                        <property>
                            <name>selectExprClause</name>
                            <value>time, uuid, user_id, event_type, host, platform, origin_referer, spam, course_id, time_minute_1_start as start_date, time_minute_1_end as end_date, user_id_minutely_duplicate_flag, course_type, course_process, course_id</value>
                            <description></description>
                        </property>
                        <property>
                            <name>whereClause</name>
                            <!--<value>course_id != '' and event_type like '/courses/%/courseware/%' and user_id_minutely_duplicate_flag = 0</value>-->
                            <value>event_type like '/courses/%/courseware/%' and user_id_minutely_duplicate_flag = 0</value>
                            <description>
                                统计学习活跃人数
                            </description>
                        </property>
                        <property>
                            <name>statisticKeyMap</name>
                            <value>L0:NONE,L1:host,L2:platform,L3.2.1:origin_referer,L3.2.2:spam,L5:course_type,L6:course_process,L7:course_id,T1:start_date,T2:end_date</value>
                            <description>
                                参考了以前离线计算的配置方式，用于简化统计指标维度(targetKeysList)的配置
                            </description>
                        </property>
                        <property>
                            <name>targetKeysList</name>
                            <value>L0:T1:T2,L1:T1:T2,L2:T1:T2,L3.2.1:T1:T2,L3.2.2:T1:T2</value>
                            <description>
                                各统计指标维度的keys列表(冒号分隔)+"#"+data_type#vale_type#value_cycle
                                各统计指标维度的keys没有时设置None，
                                data_type/value_type/value_cycle没有配置时取通用的data_type/value_type/value_cycle
                                参考：$SPARK_CMD access_courseware.py ${st} ${et} L1,L2,L3.2.1,L3.2.2,L5,L6,L7 ${HDFS_ROOT}/access_courseware/${st}_${et}
                            </description>
                        </property>

                        <property>
                            <name>data.type</name>
                            <value>access_courseware</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>value.type</name>
                            <value>users</value>
                            <description>
                                统计指标默认指标取值含义，访问
                            </description>
                        </property>

                        <property>
                            <name>value.cycle</name>
                            <value>minute_1</value>
                            <description>
                                统计指标默认的指标关联实体标识，如注册用户类
                            </description>
                        </property>

                        <property>
                            <name>aggegate.key.method.list</name>
                            <value>user_id:count</value>
                            <description>
                                uk: count/countDistinct的字段名
                                method: count/countDistinct/sum 聚合操作的函数名
                            </description>
                        </property>

                        <property>
                            <name>statistic.keyLabel.excludes</name>
                            <value>T1,T2</value>
                            <description>
                                定制功能，ESWriter插件类中用于控制输出到ES时，key,keyLevel的取值不含哪些字段名
                            </description>
                        </property>

                        <!--为减少spark-job数，相同数据接口的rdd可以进行union，只指定一个输出接口-->
                        <property>
                            <name>output.class</name>
                            <!--<value>com.xuetangx.streaming.output.ConsolePrinter</value>-->
                            <value>com.xuetangx.streaming.rules.ESOutputRule</value>
                            <description>
                                默认com.xuetangx.streaming.rules.ConsoleOutputRule：输出到日志文件
                            </description>
                        </property>

                        <property>
                            <name>output.dataInterfaceId</name>
                            <value>45</value>
                            <description>
                                需要根据output.class指定的插件类配置
                            </description>
                        </property>
                    </properties>
                </step>

            </computes>

        </computeStatistic>

    </computeStatistics>

    <!--<computeStatistics id="2" interfaceId="2" phase="3"></computeStatistics>-->

</configuation>
